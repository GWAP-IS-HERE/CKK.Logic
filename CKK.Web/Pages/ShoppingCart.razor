@page "/shoppingcart"

@using CKK.Logic.Models
@using CKK.DB.UOW
@using CKK.DB.Interfaces

@inject NavigationManager NavManager

@if (uow == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="Text-center">
		<h1 class="display-4">Welcome to the online store for Corey's Knick Knacks!</h1>
	</div>
	<form method="get">
		<input type="hidden" value="@order.OrderId" />
		<p>Feel free to order as much (or as little) as you'd like!</p>
		<div class="row">
			@foreach (var item in uow.Products.GetAll())
			{
				<div class="card" style="width: 18rem; padding: 5px;">
					<div class="card-body">
						<h5 class="card-title text-center">@item.Name</h5>
						<p class="card-text">@item.Price.ToString("c")</p>
						<p class="card-text">Quantity Available: @item.Quantity</p>
						<br/>
					</div>
					<div class="card-footer">
						<input class="num-spinner" id="spinner-@item.Id" @onchange="@(e => spinnerChange(item.Id, e.Value))" style="padding: 10px; width: 75%;" type="number" value="0" min="0" max="@item.Quantity" step="1"/>
					</div>
				</div>
			}
		</div>
	</form>
	<span style="font-size: 1.5em;">@checkoutTotal</span><br/>
	<a id="CheckoutBtn" @onclick="CheckOut" class="btn btn-success btn-lg btn-block">Checkout</a>
}

@code {
	private Order order;
	string checkoutTotal = "Total: $0.00";
	[Inject]
	private IUnitOfWork uow { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		if (uow != null)
		{
			order = uow.Orders.GetById(1);
			if (order == null) //make a new order
			{
				Order newOrder = new Order() { OrderId = 1, OrderNumber = "1", CustomerId = 1, ShoppingCartId = 100 };
				order = newOrder;
				uow.Orders.Add(newOrder);
			}
		}
	}

	private void UpdateTotal()
	{
		var total = uow.ShoppingCarts.GetTotal(order.ShoppingCartId).ToString("c");
		checkoutTotal = "Total: " + total;
	}

	protected void spinnerChange(int productId, object value)
	{
		var Item = uow.ShoppingCarts.AddToCart(order.ShoppingCartId, productId, Convert.ToInt16(value));
		UpdateTotal();
	}

	protected void CheckOut()
	{
		var inventory = uow.Products.GetAll();

		var cartItems = uow.ShoppingCarts.GetProducts(order.ShoppingCartId);
		foreach (var item in cartItems)
		{
			Product prod = inventory.Where(x => x.Id == item.ProductId).FirstOrDefault();
			prod.Quantity -= item.Quantity;
			uow.Products.Update(prod);
		}

		uow.Orders.Delete(1);
		uow.ShoppingCarts.ClearCart(order.ShoppingCartId);

		UpdateTotal();
		NavManager.NavigateTo("/checkout");
	}
}
